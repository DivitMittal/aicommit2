# AICommit2 - AI-Powered Commit Message Generator

## Project Overview
AICommit2 is a reactive CLI tool that generates commit messages for Git and Jujutsu repositories using multiple AI providers (OpenAI, Anthropic, Gemini, Mistral, Cohere, Groq, Ollama, etc.). It analyzes staged diffs and generates contextual commit messages in conventional or gitmoji formats.

**Stack**: TypeScript, Node.js, RxJS, Inquirer
**Architecture**: Service-oriented with VCS abstraction layer
**Key Features**: Multi-AI support, reactive UI, VCS abstraction (Git/Jujutsu), code review, git hooks


## Core Modules

### Entry Point & CLI (`src/cli.ts`)
**Purpose**: CLI argument parsing and command routing
**Key Functions**:
- `cli()` - Main entry point using cleye library, handles all CLI flags and routes to appropriate commands

**Flags**: locale, generate, exclude, all, type, confirm, clipboard, prompt, watch-commit, hook-mode, pre-commit, include-body, auto-select, edit, disable-lowercase

**Commands**: config, github-login, hook, log


### Configuration System (`src/utils/config.ts`)
**Purpose**: Configuration management with INI file parsing, env var handling, and multi-provider config
**Key Types**:
- `RawConfig` - Unvalidated config object
- `ValidConfig` - Parsed and validated configuration
- `ModelConfig<Model>` - Model-specific configuration type
- `BuiltinService` - Union of supported AI providers
- `CommitType` - 'conventional' | 'gitmoji' | ''

**Key Functions**:
- `getConfig(cliConfig: RawConfig, rawArgv?: string[]): Promise<ValidConfig>` - Loads and merges config from file, env vars, and CLI
- `setConfigs(keyValues: [string, any][]): Promise<void>` - Write config values to file
- `readConfigFile(): Promise<RawConfig>` - Read INI config from XDG paths
- `getConfigPath(): Promise<string>` - Resolve config file location
- `resolvePromptPath(promptPath: string): string` - Resolve absolute/relative prompt paths
- `modelNames(config: RawConfig): readonly string[]` - List all configured AI services

**Constants**:
- `BUILTIN_SERVICES`: ['OPENAI', 'OLLAMA', 'HUGGINGFACE', 'GEMINI', 'ANTHROPIC', 'MISTRAL', 'CODESTRAL', 'COHERE', 'GROQ', 'PERPLEXITY', 'DEEPSEEK', 'GITHUB_MODELS']
- `AICOMMIT_CONFIG_DIR`: `~/.config/aicommit2` (XDG-compliant)
- `AICOMMIT_LOGS_DIR`: `~/.local/state/aicommit2/logs`
- `DEFAULT_OLLAMA_HOST`: 'http://localhost:11434'

**Config Priority**: CLI Args > Env Vars > Model-Specific > General > Defaults


### VCS Abstraction Layer (`src/utils/vcs.ts`, `src/utils/vcs-adapters/`)
**Purpose**: Unified interface for Git and Jujutsu operations
**Architecture**: Adapter pattern with base class and concrete implementations

**Base Adapter** (`base.adapter.ts`):
- `BaseVCSAdapter` - Abstract class defining VCS interface
- `assertRepo(): Promise<string>` - Verify VCS repo exists
- `getStagedDiff(excludeFiles?: string[], exclude?: string[]): Promise<VCSDiff | null>` - Get staged changes
- `commit(message: string, args?: string[]): Promise<void>` - Create commit
- `getCommentChar(): Promise<string>` - Get comment character
- `getCommitDiff?(commitHash: string, excludeFiles?: string[], exclude?: string[]): Promise<VCSDiff | null>` - Get commit diff

**Git Adapter** (`git.adapter.ts`):
- Implements BaseVCSAdapter for Git
- Uses `git diff --cached` for staged changes
- Supports file exclusion via `:(exclude)` pathspec

**Jujutsu Adapter** (`jujutsu.adapter.ts`):
- Implements BaseVCSAdapter for Jujutsu
- Uses `jj diff` for working copy changes
- Supports fileset syntax: `~(path:glob)` for exclusions
- Auto-detects colocated repos (jj v0.34.0+)

**VCS Functions** (`vcs.ts`):
- `detectVCS(): Promise<BaseVCSAdapter>` - Auto-detect VCS type (priority: forceGit config > FORCE_GIT env > jj > git)
- `assertGitRepo(): Promise<string>` - Verify VCS repo (backward compat)
- `getStagedDiff(excludeFiles?: string[], exclude?: string[]): Promise<GitDiff | null>` - Get staged changes
- `getVCSName(): Promise<string>` - Get VCS name ('git' | 'jujutsu')
- `commitChanges(message: string, args?: string[]): Promise<void>` - Create commit using detected VCS


### AI Service Architecture (`src/services/ai/`)
**Purpose**: Abstract AI provider implementations with unified interface

**Base Service** (`ai.service.ts`):
- `AIService` - Abstract base class for all AI providers
- `abstract generateCommitMessage$(): Observable<ReactiveListChoice>` - Generate commit messages
- `abstract generateCodeReview$(): Observable<ReactiveListChoice>` - Generate code reviews
- `parseMessage(aiGeneratedText: string, type: CommitType, maxCount: number): AIResponse[]` - Parse AI JSON response
- `handleError$(error: AIServiceError): Observable<ReactiveListChoice>` - Unified error handling
- `sanitizeResponse(generatedText: string | string[]): AIResponse[]` - Sanitize AI responses

**Types**:
- `AIServiceParams` - {config, stagedDiff, keyName, logSessionId?}
- `AIResponse` - {title: string, value: string}
- `RawCommitMessage` - {subject: string, body?: string, footer?: string}

**Service Factory** (`ai-service.factory.ts`):
- `AIServiceFactory.create<T>(className: {new(): T}, params: AIServiceParams): T` - Factory for AI service instantiation

**Concrete Services** (all extend AIService):
- `OpenAIService` - OpenAI API integration
- `AnthropicService` - Anthropic Claude API
- `GeminiService` - Google Gemini API
- `MistralService` - Mistral AI API
- `CodestralService` - Codestral API
- `OllamaService` - Ollama local models
- `HuggingFaceService` - HuggingFace models
- `CohereService` - Cohere API
- `GroqService` - Groq API
- `PerplexityService` - Perplexity API
- `DeepSeekService` - DeepSeek API
- `GitHubModelsService` - GitHub Models API
- `OpenAICompatibleService` - Generic OpenAI-compatible API


### Request Management (`src/managers/`)
**Purpose**: Orchestrate AI requests and user interaction

**AI Request Manager** (`ai-request.manager.ts`):
- `AIRequestManager(config: ValidConfig, stagedDiff: GitDiff)` - Constructor
- `createCommitMsgRequests$(modelNames: ModelName[]): Observable<ReactiveListChoice>` - Create commit message requests
- `createCodeReviewRequests$(modelNames: ModelName[]): Observable<ReactiveListChoice>` - Create code review requests

**Reactive Prompt Manager** (`reactive-prompt.manager.ts`):
- `ReactivePromptManager(loaderOptions: LoaderOptions)` - Constructor
- `initPrompt(options?: any): Promise<any>` - Initialize inquirer prompt
- `startLoader(): void` - Start loading spinner
- `refreshChoices(choice: ReactiveListChoice): void` - Add choice to prompt
- `checkErrorOnChoices(shouldExit?: boolean): void` - Check for errors
- `destroy(): void` - Cleanup resources

**Console Manager** (`console.manager.ts`):
- `printTitle(): void` - Print ASCII art title
- `printStagedFiles(staged: GitDiff): void` - Display staged files
- `printCommitted(): void` - Success message
- `printCancelledCommit(): void` - Cancellation message
- `displaySpinner(text: string): Ora` - Create loading spinner


### Main Commands (`src/commands/`)

**aicommit2** (`aicommit2.ts`):
**Purpose**: Main commit message generation flow
**Signature**: `(locale?, generate?, excludeFiles[], stageAll, commitType?, confirm, useClipboard, prompt?, includeBody?, autoSelect, edit, disableLowerCase, rawArgv[]) => Promise<void>`
**Flow**:
1. Validate VCS repo
2. Stage files if --all flag
3. Get staged diff
4. Optionally run code review
5. Generate commit messages from AI providers
6. Allow user selection or auto-select
7. Optionally open editor
8. Commit or copy to clipboard

**Helper Functions**:
- `getAvailableAIs(config: ValidConfig, requestType: RequestType): ModelName[]` - Filter enabled AI providers
- `handleCodeReview(manager, availableAIs): Promise<void>` - Code review flow
- `handleCommitMessage(manager, availableAIs, autoSelect): Promise<string>` - Commit message selection
- `openEditor(message: string): Promise<string>` - Open message in editor
- `commitChanges(message: string, rawArgv: string[]): Promise<void>` - Execute commit

**config** (`config.ts`):
- `get [<key>...]` - Get config values
- `set <key>=<value>` - Set config values
- `del <config-name>` - Delete config
- `path` - Print config path

**hook** (`hook.ts`):
- `install` - Install prepare-commit-msg hook
- `uninstall` - Uninstall hook

**prepare-commit-msg-hook** (`prepare-commit-msg-hook.ts`):
- Git hook implementation that generates commit message in `.git/COMMIT_EDITMSG`

**pre-commit-hook** (`pre-commit-hook.ts`):
- Pre-commit framework integration

**watch-git** (`watch-git.ts`):
- Watch mode for real-time commit analysis using chokidar

**log** (`log.ts`):
- `list` - List log files
- `path` - Print logs directory
- `open` - Open logs directory
- `removeAll` - Delete all logs


### Utility Modules (`src/utils/`)

**Logging** (`logger.ts`, `ai-log.ts`):
- Winston-based logging with daily rotation
- AI request/response logging with diff hashing
- `logger.info()`, `logger.error()`, `logger.warn()`, `logger.debug()`
- `addLogEntry(diff, requestType, serviceName, systemPrompt, response, logSessionId?, error?)` - Add AI log entry

**Prompts** (`prompt.ts`):
- `generatePrompt(locale, maxLength, type, includeBody): string` - Generate system prompt
- `generateCodeReviewPrompt(locale): string` - Generate code review prompt
- `validateSystemPrompt(config: ValidConfig): Promise<void>` - Validate custom prompts

**Git Utilities** (`git.ts`):
- Legacy Git-specific utilities (being phased out in favor of VCS adapters)

**HTTP Request Builder** (`src/services/http/http-request.builder.ts`):
- `HttpRequestBuilder` - Fluent API for HTTP requests with timeout, headers, proxy support

**Error Handling** (`error.ts`):
- `KnownError` - User-facing error class
- `handleCliError(error: any): void` - Central error handler

**File System** (`fs.ts`):
- `fileExists(path: string): Promise<boolean>` - Check file existence

**Utilities** (`utils.ts`):
- `flattenDeep(arr: any[]): any[]` - Deep flatten arrays
- `safeJsonParse(json: string): {ok: boolean, data?: any, error?: Error}` - Safe JSON parsing
- `getFirstWordsFrom(text: string): string` - Extract first words


## Data Flow Architecture

```
┌─────────────────────────────────────────────────────────────────────┐
│                           CLI Entry (cli.ts)                        │
│                  Parse args, route to commands                      │
└────────────────────────┬────────────────────────────────────────────┘
                         │
         ┌───────────────┼───────────────┐
         │               │               │
         v               v               v
   ┌─────────┐    ┌─────────────┐   ┌─────────┐
   │ config  │    │  aicommit2  │   │  hook   │
   │ command │    │   command   │   │ command │
   └─────────┘    └──────┬──────┘   └─────────┘
                         │
         ┌───────────────┼───────────────────────────┐
         │               │                           │
         v               v                           v
   ┌──────────┐   ┌─────────────┐           ┌──────────────┐
   │   VCS    │   │   Config    │           │   Console    │
   │ Detection│   │   Manager   │           │   Manager    │
   └────┬─────┘   └──────┬──────┘           └──────────────┘
        │                │
        v                v
   ┌─────────────────────────────────┐
   │   VCS Adapters (Git/Jujutsu)    │
   │   - getStagedDiff()             │
   │   - commit()                    │
   └────────┬────────────────────────┘
            │
            v
   ┌──────────────────────────────────────┐
   │      AIRequestManager                │
   │  - Create observables for each AI    │
   │  - Handle multiple models            │
   └────────┬─────────────────────────────┘
            │
            v
   ┌──────────────────────────────────────────────────┐
   │         AI Service Factory                       │
   │  - Instantiate service for each model            │
   └────────┬─────────────────────────────────────────┘
            │
   ┌────────┴────────┬────────────┬─────────────┐
   v                 v            v             v
┌─────────┐   ┌──────────┐   ┌────────┐   ┌─────────┐
│ OpenAI  │   │Anthropic │   │ Gemini │   │ Ollama  │
│ Service │   │ Service  │   │Service │   │ Service │
└────┬────┘   └─────┬────┘   └───┬────┘   └────┬────┘
     │              │            │             │
     └──────────────┴────────────┴─────────────┘
                    │
                    v
        ┌───────────────────────────┐
        │  ReactivePromptManager    │
        │  - Collect AI responses   │
        │  - Display to user        │
        │  - RxJS observables       │
        └────────────┬──────────────┘
                     │
                     v
            ┌────────────────┐
            │ User Selection │
            └────────┬───────┘
                     │
                     v
            ┌────────────────────┐
            │  VCS Commit        │
            │  (git/jj commit)   │
            └────────────────────┘
```

## Key Architectural Patterns

### 1. VCS Abstraction (Adapter Pattern)
Unified interface for Git and Jujutsu operations via `BaseVCSAdapter`. Each VCS implements the same interface, allowing seamless switching.

### 2. Service Factory Pattern
`AIServiceFactory` creates AI service instances dynamically based on configuration. Supports 12+ providers with unified interface.

### 3. Reactive Programming (RxJS)
AI requests are observables that emit choices as they complete. Allows parallel AI requests with real-time UI updates.

### 4. Configuration Cascade
Config resolution: CLI args → Env vars → Model config → General config → Defaults. Supports per-model overrides.

### 5. Error Handling Strategy
- `KnownError` for user-facing errors
- `AIServiceError` for AI-specific errors with status codes
- Centralized error handling in `handleCliError()`

### 6. Logging Strategy
- Winston for app logs (daily rotation)
- Separate AI request/response logs with diff hashing
- Configurable per-service logging


## Code Style Guide

### TypeScript Conventions
- **Strict mode**: Enabled with noImplicitAny, strictNullChecks
- **Naming**:
  - PascalCase for classes, types, interfaces
  - camelCase for functions, variables
  - UPPER_SNAKE_CASE for constants
  - Suffix types with descriptive name (e.g., `AIServiceParams`, `ValidConfig`)
- **Async/Await**: Preferred over raw promises
- **Observables**: Use RxJS for reactive streams (suffix with `$`)
- **Type Safety**: Avoid `any`, use generics for reusable code

### File Organization
- One class per file
- Group related functionality in directories (`services/ai/`, `utils/vcs-adapters/`)
- Use `.js` extension in imports (ESM requirement)
- Barrel exports discouraged (explicit imports)

### Error Handling
- Throw `KnownError` for user-facing errors
- Include actionable error messages
- Log errors with context (service name, status code)

### Testing
- Integration tests in `tests/specs/`
- Use execa for CLI testing
- Mock VCS operations for isolation

### Dependencies
- Minimize dependencies
- Use peer dependencies for optional features
- Pin major versions in package.json


## Configuration Data Format

### INI File Structure
```ini
# General settings apply to all services
locale="en"
generate=1
type="conventional"
temperature=0.7
maxTokens=1024
logging=true

# Model-specific settings
[OPENAI]
key="sk-..."
model="gpt-4o-mini,gpt-3.5-turbo"  # Comma-separated or array syntax
temperature=0.5
generate=2

[OLLAMA]
model[]=llama3.2
model[]=codestral
host="http://localhost:11434"
```

### Environment Variables
```bash
# API keys (override config file)
OPENAI_API_KEY="sk-..."
ANTHROPIC_API_KEY="sk-..."
GEMINI_API_KEY="..."

# Custom env key names (configurable per service)
MY_CUSTOM_KEY="..."  # Configured via envKey setting

# Force Git detection
FORCE_GIT="true"
```

### CLI Arguments
```bash
# Override all config
aicommit2 --locale="jp" --generate=3 --OPENAI.temperature=0.8
```


## Common Development Patterns

### Adding a New AI Provider
1. Create service class extending `AIService` in `src/services/ai/`
2. Implement `generateCommitMessage$()` and `generateCodeReview$()`
3. Add config parser in `modelConfigParsers` (src/utils/config.ts)
4. Add to `BUILTIN_SERVICES` constant
5. Register in `AIRequestManager.createServiceRequests$()`

### Adding a New VCS
1. Create adapter class extending `BaseVCSAdapter` in `src/utils/vcs-adapters/`
2. Implement all required methods (assertRepo, getStagedDiff, commit, etc.)
3. Update `detectVCS()` in `src/utils/vcs.ts`
4. Add detection logic and priority rules

### Custom Prompt Templates
- Use `{locale}`, `{maxLength}`, `{type}`, `{generate}` placeholders
- Store in file and reference via `systemPromptPath` config
- Supports relative paths (to config dir) or absolute paths


## Conclusion

AICommit2 is a well-architected CLI tool that demonstrates:
- **Clean Separation**: VCS, AI, and UI concerns are isolated
- **Extensibility**: Easy to add new AI providers or VCS systems
- **Type Safety**: Comprehensive TypeScript types with strict checking
- **User Experience**: Reactive UI with real-time feedback, parallel AI requests
- **Configuration**: Flexible multi-layer config with sensible defaults
- **Modularity**: Single-responsibility modules with clear interfaces

The codebase follows modern TypeScript best practices with heavy use of RxJS for reactive programming, adapter pattern for VCS abstraction, and factory pattern for AI service instantiation. The configuration system is sophisticated with cascading priority and per-model overrides.
